Problem 1:
Insertion Sort: best case, average case, worst case
insertionSort(A,n)
    for i = 2 to n                                  | 1
    key = A[i]                                      | 1
    //insert A[i] into sorted subarray A[1:i-1]     | 
    j = i - 1                                       | 1
    while j > 0 and A[j] > key                      | i
        A[j+1] = A[j]                               | 1
        j = j - 1                                   | 1
    A[j+1] = key                                    | 1

- best case: O(n), because the array is already sorted immidiately.
- average case: O(n^2), the middle case is when its partly sorted so that the while loop only goes through about half the iterations
- worst case: O(n^2), the worst case is when the array is not sorted and goes in reverse order. this means the loop goes through every single iteration

Problem 2:
Matrix Multiply: best case, average case, worst case
MATRIX_MULTIPLY(A, B): 
  if columns(A) ≠ rows(B): 
    raise ValueError("Matrix multiplication is not defined.") 
  rows_A ← number of rows in A                              | 1
  cols_A ← number of columns in A                           | 1
  cols_B ← number of columns in B                           | 1
  result ← matrix of size rows_A x cols_B filled with zeros | n^2
  for i from 1 to rows_A do:                                | n
    for j from 1 to cols_B do:                              | n
    sum ← 0                                                 | 1
      for k from 1 to cols_A do:                            | n
        sum ← sum + A[i][k] * B[k][j]                       | 1
      result[i][j] ← sum return result                      | 1

best case,middle case, worst case: O(n^3), all scenerios take the same amount of time because its the same amount of steps no matter the best or worst case scenerio. its always computing the same things.