Problem 1:
T(N) = 2T(N-1) + 1
- O(n), we reduce each time by a constant cost of 1, meaning its O(n)
T(N) = 3T(N-1) + n
- O(n), we reduce each time by a constant cost of 1, meaning its O(n)
T(N) = 9T(N/2) + n^2
- O(n^3/2), log2(9) = 3/2
T(N) = 100T(N/2) + n^log2cn+1  (c is a constant)
- O(n^log2(100)), because log2(100)
T(N) = 4T(N/2) + n^2 logn
- O(n^2), because log2(4) = 2
T(N) = 5T(N/2) + n^2 /logn
- O(2), n^2/logn is the work total, so to sum up everything it is n^2/logn * logn = 2

Problem 2:

yetAnotherFunc(n):          
  if n > 1:                 
    for(i=0;i<10n;i++)      
      doSomething;          
    yetAnotherFunc(n/2);   
    yetAnotherFunc(n/2);    

T(n) = t(n/2) + t(n/2) + 10n = 2T(n/2) + 10n

T(n) = 10nlog2(n)
Time complexity of O(nlogn)
