Problem 1:

10000000000n^2 vs n^3           | n^3, because it approaches infinity first
n^2 log(n) vs n(log(n))^10      | n^2 logn, because it grows faster than the other option
n^logn vs 2^sqrt(n)             | n^logn, because log(n) grows faster than sqrt(n)
2^n vs 2^2n                     | 2^2n, because it approaches infinity first


-----------------------

Problem 2: Now let's examine some [pseudo]code and apply asymptotic notation to it.
isPrime(n): 
  for(i = 2, i*i <= n; i++) {
    if(n % x == 0) {
      return false
    }
  return true

What is the 
Best Case: O(1) when the number of iterations is minimal
Worst Case: O(sqrt(n)) when n is a very large prime number where the loop will iterate an absurd amount of times
Average Case: O(sqrt(n)) when n is a medium sized prime number where the loop will iterate an average number of times
